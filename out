diff --git a/callstack.h b/callstack.h
index b4f5502..c506fbd 100644
--- a/callstack.h
+++ b/callstack.h
@@ -12,7 +12,7 @@ struct _elprof_CALLSTACK_RECORD
 
 	const char  *file_defined;
 	const char *function_name;
-	long		 line_defined;
+	int line_defined;
 	
 	clock_t   local_time;
 	clock_t   total_time;
diff --git a/elprof_core.c b/elprof_core.c
index 2d1dda5..5c93109 100644
--- a/elprof_core.c
+++ b/elprof_core.c
@@ -17,7 +17,6 @@ void elprof_callhookIN(elprof_STATE *S, const char *func_name, const char *file,
 	#ifdef DEBUG
 	if (!newf)
 	{
-	int i;
 	printf("mem not enough\nstack is\n");
 	elprof_CALLSTACK_RECORD *p = S->stack_top;
 	while (p)
@@ -60,14 +59,14 @@ int elprof_callhookOUT(elprof_STATE *S)
 
 	if (leavef->line_defined != -1)
 	{/* save call stack info */
-		delay_time = elprof_logger_save(leavef);
+		delay_time = elprof_logger_save(leavef); 
 		if (delay_time < 0)
 		{
-			fprintf(stderr, "save the call of %s : %ld : %s failed!",
+			/*fprintf(stderr, "save the call of %s : %d : %s failed!",
 							leavef->file_defined,
 							leavef->line_defined,
 							leavef->function_name
-				   );
+				   );*/
 		}
 		else if (delay_time > 0)
 		{
@@ -115,5 +114,6 @@ void elprof_core_finalize(elprof_STATE *S)
 		CALLSTACK_RECORD_pool_destroy();
 		free(S);
 		elprof_logger_stop();
+		S = NULL;
 	}
 }
diff --git a/elprof_logdata.c b/elprof_logdata.c
index 68adad6..4bfe5b1 100644
--- a/elprof_logdata.c
+++ b/elprof_logdata.c
@@ -71,15 +71,19 @@ static void _log_RECORD_pool_reset()
 	memset(s_hash, 0, sizeof(bucket_t) * nbuckets);
 }
 
-void log_RECORD_pool_add(char *source, float local_time, float total_time)
+void log_RECORD_pool_add(char *file_defined, char *function_name, 
+						int line_define, float local_time, float total_time)
 {
 	int i;
 	unsigned int hash_val;
 	bucket_t *bucket;
 	entry_t *dst_entry;
 	log_RECORD *new_rec;
+	char source[MAX_SOURCE_STR_LEN];
 
 	/* hash source string , get dest entry by hash key */
+	snprintf(source, MAX_SOURCE_STR_LEN, "%s:%d\t%s",
+				file_defined, line_define, function_name);
 	hash_val = fnv_32a_str(source, FNV1_32A_INIT);
 	bucket = &s_hash[hash_val % nbuckets];
 
@@ -100,7 +104,7 @@ void log_RECORD_pool_add(char *source, float local_time, float total_time)
 		new_rec = (log_RECORD *)file_buffer_get_next_chunk();
 		if (!new_rec)
 		{
-			printf(">> Mark, empty new rec\n");
+			DBG(printf(">> Mark, empty new rec\n"));
 			file_buffer_reset();
 			new_rec = (log_RECORD *)file_buffer_get_next_chunk();
 			ASSERT(new_rec, "File Buffer size is too small");
diff --git a/elprof_logdata.h b/elprof_logdata.h
index 2d44b8a..d895ad1 100644
--- a/elprof_logdata.h
+++ b/elprof_logdata.h
@@ -15,6 +15,6 @@ typedef struct _log_RECORD
 int log_RECORD_pool_init(int size, const char *log_filename);
 void log_RECORD_pool_free();
 
-void log_RECORD_pool_add(char *source, float local_time, float total_time);
+void log_RECORD_pool_add(char *file_defined, char *function_name, int line_defined, float local_time, float total_time);
 
 #endif
diff --git a/elprof_logger.c b/elprof_logger.c
index d908654..6286d2f 100644
--- a/elprof_logger.c
+++ b/elprof_logger.c
@@ -13,8 +13,10 @@
 #include "elprof_logdata.h"
 #include "common.h"
 
-#define DEF_OUT_FILENAME "elprof_lzr.out"
-#define MAX_RECORDE_STRING_LEN (1 << 8)
+#define DEF_OUT_FILENAME "elprof_xxx.out"
+#define MAX_FILE_DEF_NAME (1 << 7)
+#define MAX_FUNC_NAME (1 << 6)
+#define MAX_RAW_LOG_RECORD (1 << 8)
 #define BUFFER_INIT_SIZE (1 << 16)
 #define BUFFER_LIMIT_SIZE (1 << 17)
 #define DATA_END_MARK_STR "THIS IS END"
@@ -25,8 +27,7 @@
 static int pipefd[2];
 static pid_t child_pid;
 static int end_marker_str_len;
-static float SECOND_PER_CLOCKS;
-
+static int s_logger_running;
 
 
 static int _write(int fd, char *buf, int n)
@@ -106,68 +107,128 @@ static int _send_log_data()
 	return 0;
 }
 
+void _terminate_logger()
+{
+	buffer_free();
+	close(pipefd[1]);
+	s_logger_running = 0;
+}
+
 int elprof_logger_save(elprof_CALLSTACK_RECORD *savef)
 {
 	clock_t delay_time, beg_time_marker, end_time_marker;
 	char *chunk;
-	chunk = buffer_get_next_chunk(MAX_RECORDE_STRING_LEN);
+	int size;
+	int len;
+	const char *loop;
+
+	if (!s_logger_running)
+		return -1;
+	
+	chunk = buffer_get_next_chunk(MAX_RAW_LOG_RECORD);
 	delay_time = 0;
 	if (!chunk)
 	{
 		beg_time_marker = get_now_time();
 		if (-1 == _send_log_data())
+		{
+			_terminate_logger();
 			return -1;
+		}
 		end_time_marker = get_now_time();
 		delay_time = end_time_marker - beg_time_marker;
 
 		/* reset buffer */
 		buffer_reset();
 		/* retry */
-		chunk = buffer_get_next_chunk(MAX_RECORDE_STRING_LEN);
+		chunk = buffer_get_next_chunk(MAX_RAW_LOG_RECORD);
 		ASSERT(chunk, "buffer size is too small!");
 	}
 
 	/* save log info to buffer */
-	float local_time_sec = (float)savef->local_time * SECOND_PER_CLOCKS;
-	float total_time_sec = (float)savef->total_time * SECOND_PER_CLOCKS;
-	ASSERT(savef->line_defined != -1, "Runtime error: C Func should have been ignored");
-	int size = snprintf(chunk, MAX_RECORDE_STRING_LEN, "%f %f\n%s:%ld\t%s", 
-					local_time_sec, total_time_sec, 
-					savef->file_defined, 
-					savef->line_defined, 
-					savef->function_name);
-	ASSERT(size > 0, "format log info fail");
-	buffer_consume_memory_size(strlen(chunk) + 1);
+	size = 0;
+
+	*(clock_t *)chunk = savef->local_time;
+	size += sizeof(clock_t);
+	chunk += sizeof(clock_t);
+
+	*(clock_t *)chunk = savef->total_time;
+	size += sizeof(clock_t);
+	chunk += sizeof(clock_t);
+
+	*(int *)chunk = savef->line_defined;
+	size += sizeof(int);
+	chunk += sizeof(int);
+
+	len = 0;
+	if ((loop = savef->file_defined))
+	{
+		while ((*chunk++ = *loop++) && (++len < MAX_FILE_DEF_NAME)); 
+		if (len == MAX_FILE_DEF_NAME)
+			*(chunk - 1) = '\0';
+		size += (len < MAX_FILE_DEF_NAME ? len + 1 : len);
+	}
+	else
+	{
+		*chunk++ = '\0';
+		size++;
+	}
+	
+	len = 0;
+	if ((loop = savef->function_name))
+	{
+		while ((*chunk++ = *loop++) && (++len < MAX_FUNC_NAME));
+		if (len == MAX_FUNC_NAME)
+			*(chunk - 1) = '\0';
+		size += (len < MAX_FUNC_NAME ? len + 1 : len);
+	}
+	else
+	{
+		*chunk++ = '\0';
+		size++;
+	}
+
+	buffer_consume_memory_size(size);
 	return delay_time;
 }
 
-DBG(static int debug_count = 0);
 
 static int _handle_log_data(char *log_data, int size)
 {
-	char source[MAX_SOURCE_STR_LEN];
 	float local_time;
 	float total_time;
-	int len = 0;
-	char *split;
+	int line_defined;
+	char *file_defined;
+	char *function_name;
+	int offset = 0;
+	char *saved;
 
-	DBG(debug_count++);
 	while (size > 0)
 	{
-		sscanf(log_data, "%f %f\n", &local_time, &total_time);
-		if ((split = strchr(log_data, '\n')) == NULL)
-		{
-			fprintf(stderr, "Error parseing log packet data recieved from pipe : %s", log_data);
-			return -1;
-		}
-		strncpy(source, split + 1, MAX_SOURCE_STR_LEN);
-		source[MAX_RECORDE_STRING_LEN - 1] = '\0';
+		saved = log_data;
+
+		local_time = convert_clock_time_seconds(*(clock_t *)log_data);
+		log_data += sizeof(clock_t);
+		total_time = convert_clock_time_seconds(*(clock_t *)log_data);
+		log_data += sizeof(clock_t);
+		line_defined = *(int *)log_data;
+		log_data += sizeof(int);
+
+		offset = strlen(log_data) + 1;
+		ASSERT(offset <= MAX_FILE_DEF_NAME, "file name Overflow!");
+		file_defined = log_data;
+		log_data += offset;
 
-		log_RECORD_pool_add(source, local_time, total_time);
-		len = strlen(log_data) + 1;
-		log_data += len;
-		size -= len;
+		offset = strlen(log_data) + 1;
+		ASSERT(offset <= MAX_FUNC_NAME, "func name Overflow!");
+		function_name = log_data;
+		log_data += offset;
+
+		log_RECORD_pool_add(file_defined, function_name, line_defined, local_time, total_time);
+
+		size -= (log_data - saved);
 	}
+	ASSERT(size == 0, "_handle_log_data Runtime Error :  size is not multiply of raw log RECORD!")
 	return 0;
 }
 
@@ -240,14 +301,15 @@ static void _child_process_exit(int exit_id)
 	exit(exit_id);
 }
 
+
 int elprof_logger_init(const char *log_filename)
 {
 	int ret;
+	struct sigaction act;
 
 	if (log_filename == NULL)
 		log_filename = DEF_OUT_FILENAME; 
 	end_marker_str_len = strlen(DATA_END_MARK_STR);
-	SECOND_PER_CLOCKS = convert_clock_time_seconds(1);
 	
 	if (pipe(pipefd) == -1) { perror("pipe");return -1; }
 	
@@ -259,6 +321,11 @@ int elprof_logger_init(const char *log_filename)
 		return -1;
 	}
 
+	memset(&act, 0, sizeof(act));
+	act.sa_handler = SIG_IGN;
+	sigemptyset(&act.sa_mask);
+	sigaction(SIGPIPE, &act, NULL);
+
 	if (child_pid == 0)
 	{
 		char filename[256];
@@ -269,16 +336,23 @@ int elprof_logger_init(const char *log_filename)
 		_child_process_exit(ret);
 	}
 	close(pipefd[0]);
+	ASSERT(MAX_RAW_LOG_RECORD > MAX_FUNC_NAME + MAX_FILE_DEF_NAME + 
+		sizeof(int) + 2 * sizeof(clock_t), "Total Max Raw Log Record is too small!");
+	s_logger_running = 1;
+	
 	return 0;
 }
 
 void elprof_logger_stop(void)
 {
 	int status;
-	_send_log_data();
-	buffer_free();
-	close(pipefd[1]);
+
+	if (s_logger_running)
+	{
+		_send_log_data();
+		_terminate_logger();
+	}
 	waitpid(child_pid, &status, 0);
-	DBG(printf("parent process exit normally!"));
+	DBG(printf("logger has stopped!"));
 }
 
diff --git a/elprofiler.c b/elprofiler.c
index 598e1f2..3c72400 100644
--- a/elprofiler.c
+++ b/elprofiler.c
@@ -14,11 +14,11 @@ static elprof_STATE *s_S;
 static int profiler_stop(lua_State *L);
 static void callhook(lua_State *L, lua_Debug *ar)
 {
-	lua_getinfo(L, "nS", ar);
+	lua_getinfo(L, "nS", ar); 
 	
 	/* ignore LUA API AND C Function */
-//	if (ar->linedefined == -1)
-//		return;
+   /* if (ar->linedefined == -1) */
+   /*		return;  */
 		
 	if (!ar->event) 
 		/* entering a function */
@@ -79,7 +79,7 @@ static int profiler_start(lua_State *L)
 	lua_pushcfunction(L, (lua_CFunction)exit_profiler);
 	lua_settable(L, -3);
 	
-	//elprof_callhookIN(S, "profiler_start", "(C)", -1);
+	/* elprof_callhookIN(S, "profiler_start", "(C)", -1); */
 	lua_pushboolean(L, 1);
 
 	s_S = S;
diff --git a/file_buffer.c b/file_buffer.c
index edeb5fa..0440e8f 100644
--- a/file_buffer.c
+++ b/file_buffer.c
@@ -142,7 +142,7 @@ void file_buffer_reset()
 										   s_fb.buffer_size, 
 						                   s_fb.file_size);
 	s_fb.file_size += s_fb.buffer_size;
-	ASSERT(result != -1 && !s_fb.memory, "Error calling file_buffer_reset");
+	ASSERT(result != -1 && s_fb.memory, "Error calling file_buffer_reset");
 
 	s_fb.used_size = 0;
 }
diff --git a/test/profiler.out b/test/profiler.out
index bbcdc8d..905c498 100644
--- a/test/profiler.out
+++ b/test/profiler.out
@@ -1,4 +1,4 @@
-@test.lua:11	(null)	:	1.250000	2.200000	1
+@test.lua:11		:	0.810000	2.240000	1
 return function ()
 --	print('ret')
 	os.time()
@@ -6,5 +6,5 @@ return function ()
 return function ()
 --	print('ret')
 	os.time()
-	end:1	(null)	:	0.000000	0.000000	1
+	end:1		:	0.000000	0.000000	1
 @test.lua:6	func1	:	0.000000	0.000000	1000000
